{
    "BFF Controller": {
        "prefix": "bffcontroller",
        "body": [
            "",
            "import java.lang.reflect.Field;",
            "import java.util.List;",
            "import java.util.Map;",
            "",
            "import org.springframework.beans.factory.annotation.Autowired;",
            "",
            "import org.springframework.web.bind.annotation.CrossOrigin;",
            "import org.springframework.web.bind.annotation.DeleteMapping;",
            "import org.springframework.web.bind.annotation.RequestMapping;",
            "import org.springframework.web.bind.annotation.RestController;",
            "",
            "import org.springframework.web.bind.annotation.GetMapping;",
            "import org.springframework.web.bind.annotation.PatchMapping;",
            "import org.springframework.web.bind.annotation.PathVariable;",
            "import org.springframework.web.bind.annotation.PostMapping;",
            "import org.springframework.web.bind.annotation.PutMapping;",
            "import org.springframework.web.bind.annotation.RequestBody;",
            "import org.springframework.web.bind.annotation.RequestHeader;",
            "",
            "",
            "@RestController",
            "@RequestMapping(\"api/${1:entity}\")",
            "@CrossOrigin({\"*\"})",
            "public class ${2:Entity}Controller {",
            "",
            "    @Autowired ${2:Entity}Client client;",
            "",
            "    @GetMapping(\"/\")",
            "    public List<${2:Entity}DTO> findAll(@RequestHeader(\"Authorization\") String authHeader) {",
            "        return client.findAll(authHeader);",
            "    }",
            "    ",
            "    @GetMapping(\"/{id}/\")",
            "    public ${2:Entity}DTO findById(@RequestHeader(\"Authorization\") String authHeader, @PathVariable Long id){",
            "        return client.find${2:Entity}ById(authHeader, id);",
            "    }",
            "",
            "    @PostMapping(\"/\")",
            "    public ${2:Entity}DTO save(@RequestHeader(\"Authorization\") String authHeader, @RequestBody ${2:Entity}DTO entity){",
            "        return client.save(authHeader, entity);",
            "    }",
            "",
            "    @DeleteMapping(\"/{id}/\")",
            "    public void deleteById(@RequestHeader(\"Authorization\") String authHeader, @PathVariable Long id){",
            "        client.deleteById(authHeader, id);",
            "    }",
            "",
            "    @PutMapping(\"/{id}/\")",
            "    public ${2:Entity}DTO update(@RequestHeader(\"Authorization\") String authHeader, @PathVariable Long id, @RequestBody ${2:Entity}DTO entity){",
            "        return client.update(authHeader, id, entity);",
            "    }",
            "    ",
            "    @PatchMapping(\"/{id}/\")",
            "    public ${2:Entity}DTO partialUpdate(@RequestHeader(\"Authorization\") String authHeader, @PathVariable Long id, @RequestBody Map<String, Object> fields){",
            "",
            "        ${2:Entity}DTO ${2:Entity}DTO = client.find${2:Entity}ById(authHeader, id);",
            "",
            "        // itera sobre los campos que se desean actualizar",
            "        for (Map.Entry<String, Object> field : fields.entrySet()) {",
            "            String fieldName = field.getKey();",
            "            Object fieldValue = field.getValue();",
            "            ",
            "            // utiliza reflection para establecer el valor del campo en la entidad",
            "            try {",
            "                Field campoEntidad = ${2:Entity}DTO.class.getDeclaredField(fieldName);",
            "                campoEntidad.setAccessible(true);",
            "                campoEntidad.set(${2:Entity}DTO, fieldValue);",
            "            } catch (NoSuchFieldException | IllegalAccessException ex) {",
            "                // maneja la excepción si ocurre algún error al acceder al campo",
            "            }",
            "        }",
            "        return client.update(authHeader, id, ${2:Entity}DTO);",
            "    }",
            "}"
        ],
        "description": "BFF Controller"
    },

    "BFF Client": {
        "prefix": "bffclient",
        "body": [
            "",
            "import java.util.List;",
            "",
            "import org.springframework.cloud.openfeign.FeignClient;",
            "import org.springframework.web.bind.annotation.DeleteMapping;",
            "import org.springframework.web.bind.annotation.GetMapping;",
            "import org.springframework.web.bind.annotation.PathVariable;",
            "import org.springframework.web.bind.annotation.PostMapping;",
            "import org.springframework.web.bind.annotation.PutMapping;",
            "import org.springframework.web.bind.annotation.RequestHeader;",
            "",
            "@FeignClient(name = \"bff.${1:entity}\", url = \"http://${3:localhost:8080}/api/${1:entity}\")",
            "public interface ${2:Entity}Client {",
            "",
            "    @GetMapping(\"/{id}/\")",
            "    ${2:Entity}DTO find${2:Entity}ById(@RequestHeader(\"Authorization\") String authHeader, @PathVariable(\"id\") Long id);",
            "",
            "    @GetMapping(\"/\")",
            "    List<${2:Entity}DTO> findAll(@RequestHeader(\"Authorization\") String authorizationHeader);",
            "",
            "    @PostMapping(\"/\") ",
            "    ${2:Entity}DTO save(@RequestHeader(\"Authorization\") String authorizationHeader, ${2:Entity}DTO entity);",
            "",
            "    @DeleteMapping(\"/{id}/\")",
            "    void deleteById(@RequestHeader(\"Authorization\") String authorizationHeader,@PathVariable(\"id\")  Long id);",
            "",
            "    @PutMapping(\"/{id}/\")",
            "    ${2:Entity}DTO update(@RequestHeader(\"Authorization\") String authorizationHeader, @PathVariable(\"id\")  Long id, ${2:Entity}DTO entity);",
            "",
            "}"
        ],
        "description": "BFF Client with FeignClient"
    }
}